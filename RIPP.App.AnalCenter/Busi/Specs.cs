//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RIPP.App.AnalCenter.Busi
{
    [DataContract(IsReference = true)]
    public partial class Specs: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public System.DateTime AddTime
        {
            get { return _addTime; }
            set
            {
                if (_addTime != value)
                {
                    _addTime = value;
                    OnPropertyChanged("AddTime");
                }
            }
        }
        private System.DateTime _addTime;
    
        [DataMember]
        public byte[] Contents
        {
            get { return _contents; }
            set
            {
                if (_contents != value)
                {
                    _contents = value;
                    OnPropertyChanged("Contents");
                }
            }
        }
        private byte[] _contents;
    
        [DataMember]
        public string LIMSID
        {
            get { return _lIMSID; }
            set
            {
                if (_lIMSID != value)
                {
                    _lIMSID = value;
                    OnPropertyChanged("LIMSID");
                }
            }
        }
        private string _lIMSID;
    
        [DataMember]
        public int MethodID
        {
            get { return _methodID; }
            set
            {
                if (_methodID != value)
                {
                    _methodID = value;
                    OnPropertyChanged("MethodID");
                }
            }
        }
        private int _methodID;
    
        [DataMember]
        public int UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private int _userID;
    
        [DataMember]
        public byte[] Result
        {
            get { return _result; }
            set
            {
                if (_result != value)
                {
                    _result = value;
                    OnPropertyChanged("Result");
                }
            }
        }
        private byte[] _result;
    
        [DataMember]
        public string SamplePlace
        {
            get { return _samplePlace; }
            set
            {
                if (_samplePlace != value)
                {
                    _samplePlace = value;
                    OnPropertyChanged("SamplePlace");
                }
            }
        }
        private string _samplePlace;
    
        [DataMember]
        public Nullable<System.DateTime> SampleTime
        {
            get { return _sampleTime; }
            set
            {
                if (_sampleTime != value)
                {
                    _sampleTime = value;
                    OnPropertyChanged("SampleTime");
                }
            }
        }
        private Nullable<System.DateTime> _sampleTime;
    
        [DataMember]
        public string OilName
        {
            get { return _oilName; }
            set
            {
                if (_oilName != value)
                {
                    _oilName = value;
                    OnPropertyChanged("OilName");
                }
            }
        }
        private string _oilName;
    
        [DataMember]
        public Nullable<System.DateTime> AnalyTime
        {
            get { return _analyTime; }
            set
            {
                if (_analyTime != value)
                {
                    _analyTime = value;
                    OnPropertyChanged("AnalyTime");
                }
            }
        }
        private Nullable<System.DateTime> _analyTime;
    
        [DataMember]
        public string Remark
        {
            get { return _remark; }
            set
            {
                if (_remark != value)
                {
                    _remark = value;
                    OnPropertyChanged("Remark");
                }
            }
        }
        private string _remark;
    
        [DataMember]
        public int ResultType
        {
            get { return _resultType; }
            set
            {
                if (_resultType != value)
                {
                    _resultType = value;
                    OnPropertyChanged("ResultType");
                }
            }
        }
        private int _resultType;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
