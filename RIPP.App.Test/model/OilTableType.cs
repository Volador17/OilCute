//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace RIPP.App.Test.model
{
    [DataContract(IsReference = true)]
    public partial class OilTableType: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“ID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _iD = value;
                    OnPropertyChanged("ID");
                }
            }
        }
        private int _iD;
    
        [DataMember]
        public string tableName
        {
            get { return _tableName; }
            set
            {
                if (_tableName != value)
                {
                    _tableName = value;
                    OnPropertyChanged("tableName");
                }
            }
        }
        private string _tableName;
    
        [DataMember]
        public string dataStoreTable
        {
            get { return _dataStoreTable; }
            set
            {
                if (_dataStoreTable != value)
                {
                    _dataStoreTable = value;
                    OnPropertyChanged("dataStoreTable");
                }
            }
        }
        private string _dataStoreTable;
    
        [DataMember]
        public int tableOrder
        {
            get { return _tableOrder; }
            set
            {
                if (_tableOrder != value)
                {
                    _tableOrder = value;
                    OnPropertyChanged("tableOrder");
                }
            }
        }
        private int _tableOrder;
    
        [DataMember]
        public string descript
        {
            get { return _descript; }
            set
            {
                if (_descript != value)
                {
                    _descript = value;
                    OnPropertyChanged("descript");
                }
            }
        }
        private string _descript;
    
        [DataMember]
        public bool libraryA
        {
            get { return _libraryA; }
            set
            {
                if (_libraryA != value)
                {
                    _libraryA = value;
                    OnPropertyChanged("libraryA");
                }
            }
        }
        private bool _libraryA;
    
        [DataMember]
        public bool libraryB
        {
            get { return _libraryB; }
            set
            {
                if (_libraryB != value)
                {
                    _libraryB = value;
                    OnPropertyChanged("libraryB");
                }
            }
        }
        private bool _libraryB;
    
        [DataMember]
        public bool libraryC
        {
            get { return _libraryC; }
            set
            {
                if (_libraryC != value)
                {
                    _libraryC = value;
                    OnPropertyChanged("libraryC");
                }
            }
        }
        private bool _libraryC;
    
        [DataMember]
        public bool itemNameShow
        {
            get { return _itemNameShow; }
            set
            {
                if (_itemNameShow != value)
                {
                    _itemNameShow = value;
                    OnPropertyChanged("itemNameShow");
                }
            }
        }
        private bool _itemNameShow;
    
        [DataMember]
        public bool itemEnShow
        {
            get { return _itemEnShow; }
            set
            {
                if (_itemEnShow != value)
                {
                    _itemEnShow = value;
                    OnPropertyChanged("itemEnShow");
                }
            }
        }
        private bool _itemEnShow;
    
        [DataMember]
        public bool itemUnitShow
        {
            get { return _itemUnitShow; }
            set
            {
                if (_itemUnitShow != value)
                {
                    _itemUnitShow = value;
                    OnPropertyChanged("itemUnitShow");
                }
            }
        }
        private bool _itemUnitShow;
    
        [DataMember]
        public bool itemCodeShow
        {
            get { return _itemCodeShow; }
            set
            {
                if (_itemCodeShow != value)
                {
                    _itemCodeShow = value;
                    OnPropertyChanged("itemCodeShow");
                }
            }
        }
        private bool _itemCodeShow;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
