//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace RIPP.App.Test.model
{
    public partial class OilDataManageEntities : ObjectContext
    {
        public const string ConnectionString = "name=OilDataManageEntities";
        public const string ContainerName = "OilDataManageEntities";
    
        #region Constructors
    
        public OilDataManageEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public OilDataManageEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public OilDataManageEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // 创建代理需要使用 ProxyDataContractResolver 和
            // 可允许延迟加载，这可以在序列化期间展开加载图。
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet 属性
    
        public ObjectSet<OilData> OilData
        {
            get { return _oilData  ?? (_oilData = CreateObjectSet<OilData>("OilData")); }
        }
        private ObjectSet<OilData> _oilData;
    
        public ObjectSet<OilInfo> OilInfo
        {
            get { return _oilInfo  ?? (_oilInfo = CreateObjectSet<OilInfo>("OilInfo")); }
        }
        private ObjectSet<OilInfo> _oilInfo;
    
        public ObjectSet<OilTableCol> OilTableCol
        {
            get { return _oilTableCol  ?? (_oilTableCol = CreateObjectSet<OilTableCol>("OilTableCol")); }
        }
        private ObjectSet<OilTableCol> _oilTableCol;
    
        public ObjectSet<OilTableRow> OilTableRow
        {
            get { return _oilTableRow  ?? (_oilTableRow = CreateObjectSet<OilTableRow>("OilTableRow")); }
        }
        private ObjectSet<OilTableRow> _oilTableRow;
    
        public ObjectSet<OilTableType> OilTableType
        {
            get { return _oilTableType  ?? (_oilTableType = CreateObjectSet<OilTableType>("OilTableType")); }
        }
        private ObjectSet<OilTableType> _oilTableType;

        #endregion
    }
}
